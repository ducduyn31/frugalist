// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  Payable       Payable[]
  GroupMember   GroupMember[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Payable {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  name       String
  fromDate   DateTime @map("from_date")
  toDate     DateTime @map("to_date")
  components Json
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payables")
}

model GroupMember {
  id               String             @id @default(cuid())
  ownerId          String             @map("owner_id")
  name             String
  email            String?
  isGuest          Boolean            @default(false) @map("is_guest")
  isActive         Boolean            @default(false) @map("is_active")
  fromDate         DateTime?          @map("from_date")
  toDate           DateTime?          @map("to_date")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  owner            User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  GroupMemberEvent GroupMemberEvent[]

  @@map("group_members")
}

model GroupMemberEvent {
  id            String      @id @default(cuid())
  name          String?
  groupMemberId String      @map("group_member_id")
  type          String
  fromDate      DateTime    @map("from_date")
  toDate        DateTime?   @map("to_date")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id], onDelete: Cascade)

  @@map("group_member_events")
}
